// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: browser/v1/browser.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Browser_GetToken_FullMethodName     = "/api.browser.v1.Browser/GetToken"
	Browser_Regisger_FullMethodName     = "/api.browser.v1.Browser/Regisger"
	Browser_RefreshToken_FullMethodName = "/api.browser.v1.Browser/RefreshToken"
)

// BrowserClient is the client API for Browser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrowserClient interface {
	GetToken(ctx context.Context, in *Login, opts ...grpc.CallOption) (*LoginResponse, error)
	Regisger(ctx context.Context, in *Login, opts ...grpc.CallOption) (*LoginResponse, error)
	RefreshToken(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type browserClient struct {
	cc grpc.ClientConnInterface
}

func NewBrowserClient(cc grpc.ClientConnInterface) BrowserClient {
	return &browserClient{cc}
}

func (c *browserClient) GetToken(ctx context.Context, in *Login, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Browser_GetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserClient) Regisger(ctx context.Context, in *Login, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Browser_Regisger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *browserClient) RefreshToken(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Browser_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrowserServer is the server API for Browser service.
// All implementations must embed UnimplementedBrowserServer
// for forward compatibility
type BrowserServer interface {
	GetToken(context.Context, *Login) (*LoginResponse, error)
	Regisger(context.Context, *Login) (*LoginResponse, error)
	RefreshToken(context.Context, *RefreshRequest) (*LoginResponse, error)
	mustEmbedUnimplementedBrowserServer()
}

// UnimplementedBrowserServer must be embedded to have forward compatible implementations.
type UnimplementedBrowserServer struct {
}

func (UnimplementedBrowserServer) GetToken(context.Context, *Login) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedBrowserServer) Regisger(context.Context, *Login) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Regisger not implemented")
}
func (UnimplementedBrowserServer) RefreshToken(context.Context, *RefreshRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedBrowserServer) mustEmbedUnimplementedBrowserServer() {}

// UnsafeBrowserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrowserServer will
// result in compilation errors.
type UnsafeBrowserServer interface {
	mustEmbedUnimplementedBrowserServer()
}

func RegisterBrowserServer(s grpc.ServiceRegistrar, srv BrowserServer) {
	s.RegisterService(&Browser_ServiceDesc, srv)
}

func _Browser_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Browser_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserServer).GetToken(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _Browser_Regisger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserServer).Regisger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Browser_Regisger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserServer).Regisger(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _Browser_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrowserServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Browser_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrowserServer).RefreshToken(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Browser_ServiceDesc is the grpc.ServiceDesc for Browser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Browser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.browser.v1.Browser",
	HandlerType: (*BrowserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _Browser_GetToken_Handler,
		},
		{
			MethodName: "Regisger",
			Handler:    _Browser_Regisger_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Browser_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "browser/v1/browser.proto",
}
