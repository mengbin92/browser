// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: browser/v1/block.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBlockParseBlock = "/api.browser.v1.Block/ParseBlock"
const OperationBlockUpChaincode = "/api.browser.v1.Block/UpChaincode"

type BlockHTTPServer interface {
	ParseBlock(context.Context, *ParseRequest) (*ParseResponse, error)
	UpChaincode(context.Context, *UploadRequest) (*UploadResponse, error)
}

func RegisterBlockHTTPServer(s *http.Server, srv BlockHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/block/up", _Block_UpChaincode0_HTTP_Handler(srv))
	r.GET("/v1/block/parse", _Block_ParseBlock0_HTTP_Handler(srv))
}

func _Block_UpChaincode0_HTTP_Handler(srv BlockHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlockUpChaincode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpChaincode(ctx, req.(*UploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadResponse)
		return ctx.Result(200, reply)
	}
}

func _Block_ParseBlock0_HTTP_Handler(srv BlockHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ParseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBlockParseBlock)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ParseBlock(ctx, req.(*ParseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ParseResponse)
		return ctx.Result(200, reply)
	}
}

type BlockHTTPClient interface {
	ParseBlock(ctx context.Context, req *ParseRequest, opts ...http.CallOption) (rsp *ParseResponse, err error)
	UpChaincode(ctx context.Context, req *UploadRequest, opts ...http.CallOption) (rsp *UploadResponse, err error)
}

type BlockHTTPClientImpl struct {
	cc *http.Client
}

func NewBlockHTTPClient(client *http.Client) BlockHTTPClient {
	return &BlockHTTPClientImpl{client}
}

func (c *BlockHTTPClientImpl) ParseBlock(ctx context.Context, in *ParseRequest, opts ...http.CallOption) (*ParseResponse, error) {
	var out ParseResponse
	pattern := "/v1/block/parse"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBlockParseBlock))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BlockHTTPClientImpl) UpChaincode(ctx context.Context, in *UploadRequest, opts ...http.CallOption) (*UploadResponse, error) {
	var out UploadResponse
	pattern := "/v1/block/up"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBlockUpChaincode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
