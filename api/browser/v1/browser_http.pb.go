// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: browser/v1/browser.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBrowserGetToken = "/api.browser.v1.Browser/GetToken"
const OperationBrowserRefreshToken = "/api.browser.v1.Browser/RefreshToken"
const OperationBrowserRegisger = "/api.browser.v1.Browser/Regisger"

type BrowserHTTPServer interface {
	GetToken(context.Context, *Login) (*LoginResponse, error)
	RefreshToken(context.Context, *RefreshRequest) (*LoginResponse, error)
	Regisger(context.Context, *Login) (*LoginResponse, error)
}

func RegisterBrowserHTTPServer(s *http.Server, srv BrowserHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/login", _Browser_GetToken0_HTTP_Handler(srv))
	r.POST("/v1/user/register", _Browser_Regisger0_HTTP_Handler(srv))
	r.GET("/v1/user/refresh/{id}", _Browser_RefreshToken0_HTTP_Handler(srv))
}

func _Browser_GetToken0_HTTP_Handler(srv BrowserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Login
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrowserGetToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetToken(ctx, req.(*Login))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _Browser_Regisger0_HTTP_Handler(srv BrowserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Login
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrowserRegisger)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Regisger(ctx, req.(*Login))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

func _Browser_RefreshToken0_HTTP_Handler(srv BrowserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RefreshRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrowserRefreshToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshToken(ctx, req.(*RefreshRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResponse)
		return ctx.Result(200, reply)
	}
}

type BrowserHTTPClient interface {
	GetToken(ctx context.Context, req *Login, opts ...http.CallOption) (rsp *LoginResponse, err error)
	RefreshToken(ctx context.Context, req *RefreshRequest, opts ...http.CallOption) (rsp *LoginResponse, err error)
	Regisger(ctx context.Context, req *Login, opts ...http.CallOption) (rsp *LoginResponse, err error)
}

type BrowserHTTPClientImpl struct {
	cc *http.Client
}

func NewBrowserHTTPClient(client *http.Client) BrowserHTTPClient {
	return &BrowserHTTPClientImpl{client}
}

func (c *BrowserHTTPClientImpl) GetToken(ctx context.Context, in *Login, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/v1/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBrowserGetToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrowserHTTPClientImpl) RefreshToken(ctx context.Context, in *RefreshRequest, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/v1/user/refresh/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBrowserRefreshToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrowserHTTPClientImpl) Regisger(ctx context.Context, in *Login, opts ...http.CallOption) (*LoginResponse, error) {
	var out LoginResponse
	pattern := "/v1/user/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBrowserRegisger))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
